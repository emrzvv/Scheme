(define (variable? expr)
  (symbol? expr))
(define (var? expr)
  (equal? expr '(- x)))
(define (var3? expr)
  (and (equal? (car expr) 'expt) (number? (cadr expr))))
(define (var2? expr)
  (and (equal? (car expr) 'expt) (equal? (cadr expr) 'x)))
(define (sum? expr)
  (equal? (car expr) '+))
(define (make-sum expr1 expr2)
  (cond
    ((equal? expr1 0) expr2)
    (else(list '+ expr1 expr2) )
    ))
(define (otric? expr)
  (and (equal? (car expr) '-) (equal? (length expr) 2)))
(define (make-otric expr)
  '- expr)
(define (minexp? expr)
  (and (equal? (car expr) '-) (equal? (length expr) 3)))
(define (make-minus expr1 expr2)
  (list '- expr1 expr2))
(define (proizv? expr)
  (equal? (car expr) '*))
(define (make-proizv expr1 expr2)
  (cond
    ((equal? expr1 1) expr2)
    ((equal? expr2 1) expr1)
    ((equal? expr1 0) 0)
    (else(list '* expr1 expr2) )
    ))
(define (expt? expr)
  (equal? (car expr) 'expt))

(define (exp? expr)
  (equal? (car expr) 'exp))
(define (/? expr)
  (equal? (car expr) '/))
(define (make-/ expr1 expr2)
  (list '/ expr1 expr2))
(define (make-expt expr1 expr2)
  (list 'expt expr1 expr2))
(define (log? expr)
  (equal? (car expr) 'log))
(define (make-log expr)
  (list 'log expr))
(define (make-exp expr)
  (list 'exp expr))
(define (cos? expr)
  (equal? (car expr) 'cos))
(define (sin? expr)
  (equal? (car expr) 'sin))
(define (tg? expr)
  (equal? (car expr) 'tg))

(define (ctg? expr)
  (equal? (car expr) 'ctg))
(define (make-cos expr)
  (list 'cos expr))
(define (make-sin expr)
  (list 'sin expr))
(define (derivative expr)
  (cond
    ((number? expr) 0)
    ((variable? expr) 1)
    ((sum? expr) (make-sum (derivative (cadr expr)) (derivative (caddr expr))))
    ((var? expr)
     (- 1))
    ((otric? expr)
     (make-proizv -1 (derivative (cadr expr))))
    ((minexp? expr)
     (make-minus (derivative (cadr expr)) (derivative (caddr expr))))
    ((and (proizv? expr) (equal? (length expr) 4))
     (derivative (make-proizv (cadr expr) (make-proizv (caddr expr) (cadddr expr)))))
    ((var2? expr)
     (make-proizv (caddr expr) (make-expt (cadr expr) (make-minus (caddr expr) 1)) ))
    ((and (proizv? expr) (equal? (length expr) 5))
     (derivative (make-proizv (make-proizv (cadr expr) (caddr expr)) (make-proizv (cadddr expr) (caddddr expr)))))
    ((exp? expr)
     (make-proizv (make-exp (cadr expr)) (derivative (cadr expr))))
    ((proizv? expr)
     (make-sum (make-proizv (derivative (cadr expr)) (caddr expr)) (make-proizv (cadr expr) (derivative (caddr expr)))))
     ((sin? expr)
     (make-proizv (make-cos (cadr expr)) (derivative (cadr expr))))
     
    ((ctg? expr) (derivative (quote (/ (cos x) (sin x)))))
    ((var3? expr)
     (make-proizv (make-expt (cadr expr) (caddr expr)) (make-log (cadr expr))))
    ((expt? expr)
     (make-proizv (make-exp (make-proizv (caddr expr) (make-log (cadr expr)))) (derivative (make-proizv (caddr expr) (make-log (cadr expr))))))
    ((log? expr)
     (make-proizv (make-expt (cadr expr) -1) (derivative (cadr expr))))
    ((cos? expr)
     (make-proizv -1 (make-proizv (make-sin (cadr expr)) ( derivative (cadr expr)))))
    ((tg? expr) (derivative (quote (/ (sin x) (cos x)))))
    ((/? expr)
     (make-/ (make-minus (make-proizv (derivative (cadr expr)) (caddr expr)) (make-proizv (derivative (caddr expr)) (cadr expr))) (make-expt (caddr expr) 2)))
    (else (display "unknown type\n"))))