(load "debug.scm")

(define (ref object idx . val)
  (cond ((= 0 (length val))
         (cond ((list? object)
                (if (and (integer? idx) (>= idx 0) (< idx (length object)))
                    (let loop ((i idx)
                               (obj object))
                      (if (= 0 i)
                          (car obj)
                          (loop (- i 1) (cdr obj))))
                    #f
                    ))
               ((string? object)
                (if (and (integer? idx) (>= idx 0) (< idx (string-length object)))
                    (string-ref object idx)
                    #f
                    ))
               ((vector? object)
                (if (and (integer? idx) (>= idx 0) (< idx (vector-length object)))
                    (vector-ref object idx)
                    #f
                    ))
               (else #f)
               ))
        ((= 1 (length val))
         (cond ((list? object)
                (if (and (integer? idx) (>= idx 0) (<= idx (length object)))
                    (let loop ((i 0)
                               (ix idx)
                               (obj object)
                               (x (car val)))
                      (if (null? obj)
                          (if (= ix i)
                              (list x)
                              '()
                              )
                          (if (= ix i)
                              (cons x (loop (+ i 1) ix obj x))
                              (cons (car obj) (loop (+ i 1) ix (cdr obj) x))
                              )
                          )
                      )
                    #f))
               ((vector? object)
                (if (and (integer? idx) (>= idx 0) (<= idx (vector-length object)))
                    (begin
                      (let loop ((i 0)
                                 (obj object)
                                 (nv (make-vector (+ (vector-length object) 1)))
                                 (x (car val)))
                        (cond
                          ((= i (+ 1 (vector-length object))) nv)
                          ((= i idx) (begin (vector-set! nv i x) (loop (+ i 1) obj nv x)))
                          ((< i idx) (begin (vector-set! nv i (vector-ref obj i)) (loop (+ i 1) obj nv x)))
                          ((> i idx) (begin (vector-set! nv i (vector-ref obj (- i 1))) (loop (+ i 1) obj nv x)))
                          (else #f)
                          ))
                      )
                    )
                )
               ((string? object)
                (if (and (integer? idx) (>= idx 0)
                         (<= idx (string-length object))
                         (char? (car val)))
                    (string-append (substring object 0 idx) (make-string 1 (car val)) (substring object idx (string-length object)))
                    #f
                ))
         ))
        (else #f)))

(define main-tests
  (list (test (ref '(1 2 3) 1) 2)
        (test (ref #(1 2 3) 1) 2)
        (test (ref "123" 1) #\2)
        (test (ref "123" 3) #f)
        (test (ref '(1 2 3) 99) #f)
        (test (ref '(2 3 4) -99) #f)
        (test (ref "123" 99) #f)
        (test (ref "124543" -1) #f)
        (test (ref '('(1 2 3) 2 3) 1 0) '(1 0 2 3))
        (test (ref #(1 2 3) 1 0) #(1 0 2 3))
        (test (ref #(1 2 3) 1 #\0) #(1 #\0 2 3))
        (test (ref "123" 1 #\0) "1023")
        (test (ref "123" 1 0) #f)
        (test (ref "123" 3 #\4) "1234")
        (test (ref "123" 5 #\4) #f)))